// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package store

import (
	"context"
	"database/sql"
)

const createRecord = `-- name: CreateRecord :execresult
INSERT INTO petroleira ( 
    id, 
    organizacao, 
    nome, 
    descricao, 
    tags, 
    qtdRecursos, 
    qtdReusos, 
    qtdDownloads, 
    qtdSeguidores )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRecordParams struct {
	ID            string
	Organizacao   string
	Nome          string
	Descricao     sql.NullString
	Tags          string
	Qtdrecursos   sql.NullInt32
	Qtdreusos     sql.NullInt32
	Qtddownloads  sql.NullInt32
	Qtdseguidores sql.NullInt32
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRecord,
		arg.ID,
		arg.Organizacao,
		arg.Nome,
		arg.Descricao,
		arg.Tags,
		arg.Qtdrecursos,
		arg.Qtdreusos,
		arg.Qtddownloads,
		arg.Qtdseguidores,
	)
}

const getAllData = `-- name: GetAllData :many
SELECT id, organizacao, nome, descricao, tags, qtdrecursos, qtdreusos, qtddownloads, qtdseguidores FROM petroleira
`

func (q *Queries) GetAllData(ctx context.Context) ([]Petroleira, error) {
	rows, err := q.db.QueryContext(ctx, getAllData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Petroleira
	for rows.Next() {
		var i Petroleira
		if err := rows.Scan(
			&i.ID,
			&i.Organizacao,
			&i.Nome,
			&i.Descricao,
			&i.Tags,
			&i.Qtdrecursos,
			&i.Qtdreusos,
			&i.Qtddownloads,
			&i.Qtdseguidores,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
